listSuccessfulPaymentIds:
SELECT
    combined_payments.type         AS type,
    combined_payments.id           AS id,
    combined_payments.created_at   AS created_at,
    combined_payments.completed_at AS completed_at
FROM (
    SELECT
        2            AS type,
        id           AS id,
        created_at   AS created_at,
        completed_at AS completed_at
    FROM lightning_outgoing_payments
    WHERE lightning_outgoing_payments.status_type LIKE 'SUCCEEDED_%'
    AND   lightning_outgoing_payments.completed_at BETWEEN :startDate AND :endDate
UNION ALL
    SELECT
        3            AS type,
        id           AS id,
        created_at   AS created_at,
        locked_at AS completed_at
    FROM splice_outgoing_payments
    WHERE splice_outgoing_payments.locked_at IS NOT NULL
    AND   splice_outgoing_payments.locked_at BETWEEN :startDate AND :endDate
UNION ALL
    SELECT
        4            AS type,
        id           AS id,
        created_at   AS created_at,
        locked_at AS completed_at
    FROM channel_close_outgoing_payments
    WHERE channel_close_outgoing_payments.locked_at IS NOT NULL
    AND   channel_close_outgoing_payments.locked_at BETWEEN :startDate AND :endDate
UNION ALL
    SELECT
        5            AS type,
        id           AS id,
        created_at   AS created_at,
        locked_at AS completed_at
    FROM splice_cpfp_outgoing_payments
    WHERE splice_cpfp_outgoing_payments.locked_at IS NOT NULL
    AND   splice_cpfp_outgoing_payments.locked_at BETWEEN :startDate AND :endDate
UNION ALL
    SELECT
        6            AS type,
        id           AS id,
        created_at   AS created_at,
        locked_at    AS completed_at
    FROM inbound_liquidity_outgoing_payments
    WHERE inbound_liquidity_outgoing_payments.locked_at IS NOT NULL
    AND   inbound_liquidity_outgoing_payments.locked_at BETWEEN :startDate AND :endDate
UNION ALL
    SELECT
        1                        AS type,
        lower(hex(payment_hash)) AS id,
        created_at               AS created_at,
        received_at              AS completed_at
    FROM incoming_payments
    WHERE incoming_payments.received_at BETWEEN :startDate AND :endDate
    AND   incoming_payments.received_at IS NOT NULL
) combined_payments
ORDER BY COALESCE(combined_payments.completed_at, combined_payments.created_at)
LIMIT :limit OFFSET :offset;
