import fr.acinq.bitcoin.ByteVector32;
import fr.acinq.bitcoin.TxId;
import fr.acinq.lightning.db.IncomingPayment;
import fr.acinq.lightning.utils.UUID;

-- incoming payments
CREATE TABLE incoming_payments (
    id BLOB AS UUID NOT NULL PRIMARY KEY,
    payment_hash BLOB AS ByteVector32 UNIQUE,
    tx_id BLOB AS TxId,
    created_at INTEGER NOT NULL,
    received_at INTEGER DEFAULT NULL,
    data BLOB AS IncomingPayment NOT NULL
);

CREATE INDEX incoming_payments_payment_hash_idx ON incoming_payments(payment_hash);

-- Create indexes to optimize the queries in AggregatedQueries.
-- Tip: Use "explain query plan" to ensure they're actually being used.
CREATE INDEX incoming_payments_filter_idx
    ON incoming_payments(received_at)
 WHERE received_at IS NOT NULL;

-- queries

insert:
INSERT INTO incoming_payments (
            id,
            payment_hash,
            tx_id,
            created_at,
            received_at,
            data)
VALUES (?, ?, ?, ?, ?, ?);

updateReceived:
UPDATE incoming_payments
SET    received_at=:receivedAt,
       data=:data
WHERE  id=:id;

get:
SELECT data
FROM   incoming_payments
WHERE  id=?;

getByPaymentHash:
SELECT data
FROM   incoming_payments
WHERE  payment_hash=?;

getOldestReceivedDate:
SELECT   received_at
FROM     incoming_payments AS r
WHERE    received_at IS NOT NULL
ORDER BY r.received_at ASC
LIMIT 1;

list:
SELECT payment.data, meta.external_id
FROM   incoming_payments AS payment
LEFT OUTER JOIN payments_metadata AS meta ON meta.id = payment.id
WHERE
    (:externalId IS NULL OR meta.external_id=:externalId)
    AND payment.created_at BETWEEN :created_at_from AND :created_at_to
ORDER BY payment.created_at DESC
LIMIT :limit OFFSET :offset;

listSuccessful:
SELECT payment.data, meta.external_id
FROM   incoming_payments AS payment
LEFT OUTER JOIN payments_metadata AS meta ON meta.id = payment.id
WHERE
    (:externalId IS NULL OR meta.external_id=:externalId)
    AND payment.received_at BETWEEN :received_at_from AND :received_at_to
ORDER BY payment.received_at DESC
LIMIT :limit OFFSET :offset;

delete:
DELETE FROM incoming_payments
WHERE payment_hash = ?;

-- use this in a `transaction` block to know how many rows were changed after an UPDATE
changes:
SELECT changes();
