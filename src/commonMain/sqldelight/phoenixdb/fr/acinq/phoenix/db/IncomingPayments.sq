import fr.acinq.lightning.bin.db.payments.types.IncomingOriginTypeVersion;
import fr.acinq.lightning.bin.db.payments.types.IncomingReceivedWithTypeVersion;

-- incoming payments
CREATE TABLE incoming_payments (
    payment_hash BLOB NOT NULL PRIMARY KEY,
    preimage BLOB NOT NULL,
    created_at INTEGER NOT NULL,
    -- origin
    origin_type TEXT AS IncomingOriginTypeVersion NOT NULL,
    origin_blob BLOB NOT NULL,
    -- this field is legacy, the amount received is the sum of the received-with parts
    received_amount_msat INTEGER DEFAULT NULL,
    -- timestamp when the payment has been received
    received_at INTEGER DEFAULT NULL,
    -- received-with parts
    received_with_type TEXT AS IncomingReceivedWithTypeVersion DEFAULT NULL,
    received_with_blob BLOB DEFAULT NULL
);

-- Create indexes to optimize the queries in AggregatedQueries.
-- Tip: Use "explain query plan" to ensure they're actually being used.
CREATE INDEX incoming_payments_filter_idx
    ON incoming_payments(received_at)
 WHERE received_at IS NOT NULL;

-- queries

insert:
INSERT INTO incoming_payments (
            payment_hash,
            preimage,
            created_at,
            origin_type,
            origin_blob)
VALUES (?, ?, ?, ?, ?);

updateReceived:
UPDATE incoming_payments
SET    received_at=?,
       received_with_type=?,
       received_with_blob=?
WHERE  payment_hash = ?;

insertAndReceive:
INSERT INTO incoming_payments (
            payment_hash,
            preimage,
            created_at,
            origin_type, origin_blob,
            received_at,
            received_with_type,
            received_with_blob)
VALUES (?, ?, ?, ?, ?, ?, ?, ?);

get:
SELECT payment_hash, preimage, created_at, origin_type, origin_blob, received_amount_msat, received_at, received_with_type, received_with_blob
FROM   incoming_payments
WHERE  payment_hash=?;

getOldestReceivedDate:
SELECT   received_at
FROM     incoming_payments AS r
WHERE    received_at IS NOT NULL
ORDER BY r.received_at ASC
LIMIT 1;

listReceivedWithin:
SELECT payment_hash, preimage, payment.created_at, origin_type, origin_blob, received_amount_msat, received_at, received_with_type, received_with_blob, meta.external_id
FROM   incoming_payments AS payment
LEFT OUTER JOIN payments_metadata AS meta ON meta.type = 1 AND meta.id = lower(hex(payment.payment_hash))
WHERE  received_at IS NOT NULL AND received_at BETWEEN :from AND :to
ORDER BY
        coalesce(received_at, payment.created_at) DESC,
        payment_hash DESC
LIMIT :limit OFFSET :offset;

listReceivedForExternalIdWithin:
SELECT payment_hash, preimage, payment.created_at, origin_type, origin_blob, received_amount_msat, received_at, received_with_type, received_with_blob, meta.external_id
FROM   incoming_payments AS payment
LEFT OUTER JOIN payments_metadata AS meta ON meta.type = 1 AND meta.id = lower(hex(payment.payment_hash))
WHERE  meta.external_id = :externalId AND received_at IS NOT NULL AND received_at BETWEEN :from AND :to
ORDER BY
        coalesce(received_at, payment.created_at) DESC,
        payment_hash DESC
LIMIT :limit OFFSET :offset;

listCreatedWithin:
SELECT payment_hash, preimage, payment.created_at, origin_type, origin_blob, received_amount_msat, received_at, received_with_type, received_with_blob, meta.external_id
FROM   incoming_payments AS payment
LEFT OUTER JOIN payments_metadata AS meta ON meta.type = 1 AND meta.id = lower(hex(payment.payment_hash))
WHERE  payment.created_at BETWEEN :from AND :to
ORDER BY
       coalesce(received_at, payment.created_at) DESC,
       payment_hash DESC
LIMIT :limit OFFSET :offset;

listCreatedForExternalIdWithin:
SELECT payment_hash, preimage, payment.created_at, origin_type, origin_blob, received_amount_msat, received_at, received_with_type, received_with_blob, meta.external_id
FROM   incoming_payments AS payment
LEFT OUTER JOIN payments_metadata AS meta ON meta.type = 1 AND meta.id = lower(hex(payment.payment_hash))
WHERE  meta.external_id = :externalId
AND    payment.created_at BETWEEN :from AND :to
ORDER BY
       coalesce(received_at, payment.created_at) DESC,
       payment_hash DESC
LIMIT :limit OFFSET :offset;

listCreatedWithinNoPaging:
SELECT payment_hash, preimage, created_at, origin_type, origin_blob, received_amount_msat, received_at, received_with_type, received_with_blob
FROM   incoming_payments
WHERE  created_at BETWEEN :from AND :to
ORDER BY
       coalesce(received_at, created_at) DESC,
       payment_hash DESC;

listAllNotConfirmed:
SELECT incoming_payments.payment_hash, preimage, created_at, origin_type, origin_blob, received_amount_msat, received_at, received_with_type, received_with_blob
FROM   incoming_payments
LEFT OUTER JOIN link_tx_to_payments
    ON link_tx_to_payments.type = 1
    AND link_tx_to_payments.confirmed_at IS NULL
    AND link_tx_to_payments.id = incoming_payments.payment_hash
WHERE received_at IS NOT NULL;

scanCompleted:
SELECT payment_hash,
       received_at
FROM   incoming_payments
WHERE  received_at IS NOT NULL;

delete:
DELETE FROM incoming_payments
WHERE payment_hash = ?;

-- use this in a `transaction` block to know how many rows were changed after an UPDATE
changes:
SELECT changes();
