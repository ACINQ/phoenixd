import fr.acinq.lightning.db.HopDesc;
import fr.acinq.lightning.bin.db.payments.LightningOutgoingDetailsTypeVersion;
import fr.acinq.lightning.bin.db.payments.LightningOutgoingPartStatusTypeVersion;
import fr.acinq.lightning.bin.db.payments.LightningOutgoingStatusTypeVersion;
import kotlin.collections.List;

PRAGMA foreign_keys = 1;

-- outgoing payments
-- Stores an outgoing payment in a flat row. Some columns can be null.
CREATE TABLE IF NOT EXISTS lightning_outgoing_payments (
    id TEXT NOT NULL PRIMARY KEY,
    recipient_amount_msat INTEGER NOT NULL,
    recipient_node_id TEXT NOT NULL,
    payment_hash BLOB NOT NULL,
    created_at INTEGER NOT NULL,
    -- details
    details_type TEXT AS LightningOutgoingDetailsTypeVersion NOT NULL,
    details_blob BLOB NOT NULL,
    -- status
    completed_at INTEGER DEFAULT NULL,
    status_type TEXT AS LightningOutgoingStatusTypeVersion DEFAULT NULL,
    status_blob BLOB DEFAULT NULL
);

-- Create indexes to optimize the queries in AggregatedQueries.
-- Tip: Use "explain query plan" to ensure they're actually being used.
CREATE INDEX IF NOT EXISTS outgoing_payments_filter_idx
    ON lightning_outgoing_payments(completed_at);

-- Stores the lightning parts that make up a lightning payment
CREATE TABLE IF NOT EXISTS lightning_outgoing_payment_parts (
    part_id TEXT NOT NULL PRIMARY KEY,
    part_parent_id TEXT NOT NULL,
    part_amount_msat INTEGER NOT NULL,
    part_route TEXT AS List<HopDesc> NOT NULL,
    part_created_at INTEGER NOT NULL,
    -- status
    part_completed_at INTEGER DEFAULT NULL,
    part_status_type TEXT AS LightningOutgoingPartStatusTypeVersion DEFAULT NULL,
    part_status_blob BLOB DEFAULT NULL,

    FOREIGN KEY(part_parent_id) REFERENCES lightning_outgoing_payments(id)
);

-- A FOREIGN KEY does NOT create an implicit index.
-- One would expect it to, but it doesn't.
-- As per the docs (https://sqlite.org/foreignkeys.html):
-- > Indices are not required for child key columns but they are almost always beneficial.
-- > [...] So, in most real systems, an index should be created on the child key columns
-- > of each foreign key constraint.
CREATE INDEX IF NOT EXISTS parent_id_idx ON lightning_outgoing_payment_parts(part_parent_id);

-- queries for outgoing payments

hasPayment:
SELECT COUNT(*) FROM lightning_outgoing_payments
WHERE id = ?;

insertPayment:
INSERT INTO lightning_outgoing_payments (
            id,
            recipient_amount_msat,
            recipient_node_id,
            payment_hash,
            created_at,
            details_type,
            details_blob)
VALUES (?, ?, ?, ?, ?, ?, ?);

updatePayment:
UPDATE lightning_outgoing_payments SET completed_at=?, status_type=?, status_blob=? WHERE id=?;

scanCompleted:
SELECT id, completed_at
FROM   lightning_outgoing_payments
WHERE  completed_at IS NOT NULL;

deletePayment:
DELETE FROM lightning_outgoing_payments WHERE id = ?;

-- queries for lightning parts

countLightningPart:
SELECT COUNT(*) FROM lightning_outgoing_payment_parts WHERE part_id = ?;

insertLightningPart:
INSERT INTO lightning_outgoing_payment_parts (
            part_id,
            part_parent_id,
            part_amount_msat,
            part_route,
            part_created_at)
VALUES (?, ?, ?, ?, ?);

updateLightningPart:
UPDATE lightning_outgoing_payment_parts
SET    part_status_type=?,
       part_status_blob=?,
       part_completed_at=?
WHERE  part_id=?;

getLightningPart:
SELECT * FROM lightning_outgoing_payment_parts WHERE part_id=?;

deleteLightningPartsForParentId:
DELETE FROM lightning_outgoing_payment_parts WHERE part_parent_id = ?;

-- queries mixing outgoing payments and parts

getPaymentWithoutParts:
SELECT id,
       recipient_amount_msat,
       recipient_node_id,
       payment_hash,
       details_type,
       details_blob,
       created_at,
       completed_at,
       status_type,
       status_blob
FROM lightning_outgoing_payments
WHERE id=?;

getOldestCompletedDate:
SELECT   completed_at
FROM     lightning_outgoing_payments AS o
WHERE    completed_at IS NOT NULL
ORDER BY o.completed_at ASC
LIMIT 1;

getPayment:
SELECT parent.id,
       parent.recipient_amount_msat,
       parent.recipient_node_id,
       parent.payment_hash,
       parent.details_type,
       parent.details_blob,
       parent.created_at,
       parent.completed_at,
       parent.status_type,
       parent.status_blob,
       -- lightning parts
       lightning_parts.part_id AS lightning_part_id,
       lightning_parts.part_amount_msat AS lightning_part_amount_msat,
       lightning_parts.part_route AS lightning_part_route,
       lightning_parts.part_created_at AS lightning_part_created_at,
       lightning_parts.part_completed_at AS lightning_part_completed_at,
       lightning_parts.part_status_type AS lightning_part_status_type,
       lightning_parts.part_status_blob AS lightning_part_status_blob
FROM lightning_outgoing_payments AS parent
LEFT OUTER JOIN lightning_outgoing_payment_parts AS lightning_parts ON lightning_parts.part_parent_id = parent.id
WHERE parent.id=?;

listPaymentsForPaymentHash:
SELECT parent.id,
       parent.recipient_amount_msat,
       parent.recipient_node_id,
       parent.payment_hash,
       parent.details_type,
       parent.details_blob,
       parent.created_at,
       parent.completed_at,
       parent.status_type,
       parent.status_blob,
       -- lightning parts
       lightning_parts.part_id AS lightning_part_id,
       lightning_parts.part_amount_msat AS lightning_part_amount_msat,
       lightning_parts.part_route AS lightning_part_route,
       lightning_parts.part_created_at AS lightning_part_created_at,
       lightning_parts.part_completed_at AS lightning_part_completed_at,
       lightning_parts.part_status_type AS lightning_part_status_type,
       lightning_parts.part_status_blob AS lightning_part_status_blob
FROM lightning_outgoing_payments AS parent
LEFT OUTER JOIN lightning_outgoing_payment_parts AS lightning_parts ON lightning_parts.part_parent_id = parent.id
WHERE payment_hash=?;

listPaymentsWithin:
SELECT parent.id,
       parent.recipient_amount_msat,
       parent.recipient_node_id,
       parent.payment_hash,
       parent.details_type,
       parent.details_blob,
       parent.created_at,
       parent.completed_at,
       parent.status_type,
       parent.status_blob,
       -- lightning parts
       lightning_parts.part_id AS lightning_part_id,
       lightning_parts.part_amount_msat AS lightning_part_amount_msat,
       lightning_parts.part_route AS lightning_part_route,
       lightning_parts.part_created_at AS lightning_part_created_at,
       lightning_parts.part_completed_at AS lightning_part_completed_at,
       lightning_parts.part_status_type AS lightning_part_status_type,
       lightning_parts.part_status_blob AS lightning_part_status_blob
FROM lightning_outgoing_payments AS parent
LEFT OUTER JOIN lightning_outgoing_payment_parts AS lightning_parts ON lightning_parts.part_parent_id = parent.id
WHERE created_at BETWEEN :startDate AND :endDate
ORDER BY coalesce(parent.completed_at, parent.created_at) DESC
LIMIT :limit OFFSET :offset;

listPaymentsSentWithin:
SELECT parent.id,
       parent.recipient_amount_msat,
       parent.recipient_node_id,
       parent.payment_hash,
       parent.details_type,
       parent.details_blob,
       parent.created_at,
       parent.completed_at,
       parent.status_type,
       parent.status_blob,
       -- lightning parts
       lightning_parts.part_id AS lightning_part_id,
       lightning_parts.part_amount_msat AS lightning_part_amount_msat,
       lightning_parts.part_route AS lightning_part_route,
       lightning_parts.part_created_at AS lightning_part_created_at,
       lightning_parts.part_completed_at AS lightning_part_completed_at,
       lightning_parts.part_status_type AS lightning_part_status_type,
       lightning_parts.part_status_blob AS lightning_part_status_blob
FROM lightning_outgoing_payments AS parent
LEFT OUTER JOIN lightning_outgoing_payment_parts AS lightning_parts ON lightning_parts.part_parent_id = parent.id
WHERE completed_at IS NOT NULL
AND   created_at BETWEEN :startDate AND :endDate
ORDER BY coalesce(parent.completed_at, parent.created_at) DESC
LIMIT :limit OFFSET :offset;

-- use this in a `transaction` block to know how many rows were changed after an UPDATE
changes:
SELECT changes();
