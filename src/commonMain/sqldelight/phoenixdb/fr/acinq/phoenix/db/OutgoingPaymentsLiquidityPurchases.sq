import fr.acinq.phoenix.types.db.LiquidityAds;

-- Stores in a flat row payments standing for an inbound liquidity request (which are done through a splice).
-- The purchase data are stored in a complex column, as a json-encoded blob. See InboundLiquidityLeaseType file.
--
-- Note that these purchase data used to be called "lease" in the old on-the-fly channel mechanism, that's why the
-- colum uses that name, it's a legacy artifact. They now map to a "LiquidityAds.Purchase" object.
CREATE TABLE outgoing_payments_liquidity_purchases (
    id TEXT NOT NULL PRIMARY KEY,
    mining_fees_sat INTEGER NOT NULL,
    channel_id BLOB NOT NULL,
    tx_id BLOB NOT NULL,
    purchase_type TEXT NOT NULL,
    payment_details_type TEXT NOT NULL,
    purchase_json TEXT AS LiquidityAds.Purchase NOT NULL,
    created_at INTEGER NOT NULL,
    confirmed_at INTEGER DEFAULT NULL,
    locked_at INTEGER DEFAULT NULL
);

insert:
INSERT INTO outgoing_payments_liquidity_purchases (
    id, mining_fees_sat, channel_id, tx_id, purchase_type, payment_details_type, purchase_json, created_at, confirmed_at, locked_at
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

setConfirmed:
UPDATE outgoing_payments_liquidity_purchases SET confirmed_at=? WHERE id=?;

setLocked:
UPDATE outgoing_payments_liquidity_purchases SET locked_at=? WHERE id=?;

get:
SELECT *
FROM outgoing_payments_liquidity_purchases
WHERE id=?;

getByTxId:
SELECT *
FROM outgoing_payments_liquidity_purchases
WHERE tx_id=?;

delete:
DELETE FROM outgoing_payments_liquidity_purchases WHERE id=?;
